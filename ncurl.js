var http = require('http'),    url = require('url');var options = parse(process.argv);debug(options);if (options.help || !options.url) {  return usage();}var params = url.parse(options.url);params.method = options.method;var req = http.request(params, function (res) {  if (options.include) {    console.log('HTTP/%s %d', res.httpVersion, res.statusCode);    Object.keys(res.headers).forEach(function (key) {      console.log('%s: %s', key, res.headers[key]);    });    console.log('');  }   var data = '';  res.setEncoding('utf8');  res.on('data', function (chunk) {    data += chunk;  });  res.on('end', function () {    console.log(data);  });});if (options.data) {  req.write(options.data);}req.end();req.on('error', function (err) {  console.log('req on error: %j', err);});process.on('uncaughtException', function (err) {  console.error(err);  process.exit(1);});/** * コマンドライン引数の解析 * * @param {Array} args コマンドライン引数の配列 * @return {Object} 解析結果から格納された設定オブジェクト */function parse(args) {  // アプリケーション用の引数は3番目以降の要素  var argv = args.slice(2);  // デフォルト値で初期化  var options = {    include: false,   // -i, --include    data: undefined,  // -d --data [DATA]    request: 'GET',   // -X --request [COMMAND]    help: false,      // -h --help    url: undefined  };  while (argv.length > 0) {    var v = argv.shift();        switch (v) {    case '-i':    case '--include':      options.include = true;      break;    case '-d':    case '--data':      options.data = argv.shift();      break;    case '-X':    case '--request':      options.request = argv.shift();      break;    case '-h':    case '--help':      options.help = true;      break;    default:      options.url = v;    }  }    return options;}/** * 環境変数 NODE_DEBUG が設定されている場合にだけ、コンソールに出力をするデバッグ出力 */function debug() {  if (process.env.NODE_DEBUG) {    console.log.apply(console, arguments);  }}/** * コマンドラインヘルプを出力します */function usage() {  console.log('Usage: node ncurl [options...] <url>');  console.log('');  console.log('Options:');  console.log(' -i --include Include protocol headers in the output');  console.log(' -d --data DATA HTTP POST data');  console.log(' -X --request COMMAND Specify request command to use');  console.log(' -h --help This help text');   process.exit(1);}